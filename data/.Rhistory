# 导入所需的包
library(lmtest)
library(car)
library(bootstrap)
# 数据分析开始
setwd("/Users/a1234/Desktop/workspace/Wage/data/")
wage <- read.csv("Wage.csv",header = T)
attach(wage)
# 构建数据框
y <- wage$Salary
x1 <- wage$Sex
x2 <- wage$Race
x3 <- wage$Age
x4 <- wage$Edlevel
x5 <- wage$Work
x6 <- wage$Union
x7 <- wage$Time
x8 <- wage$Marr
x9 <- wage$Jobcat
data1 <- data.frame(y = y,x1,x2,x3,x4,x5,x6,x7,x8,x9)
# 绘制 Q-Q 图
op = par(mfrow = c(3,4))
qqnorm(x1,main = "x1")
qqline(x1,col = "red")
qqnorm(x2,main = "x2")
qqline(x2,col = "red")
qqnorm(x3,main = "x3")
qqline(x3,col = "red")
qqnorm(x4,main = "x4")
qqline(x4,col = "red")
qqnorm(x5*x5,main = "x5")
qqline(x5*x5,col = "red")
qqnorm(x6,main = "x6")
qqline(x6,col = "red")
qqnorm(x7,main = "x7")
qqline(x7,col = "red")
qqnorm(x8,main = "x8")
qqline(x8,col = "red")
qqnorm(x9,main = "x9")
qqline(x9,col = "red")
qqnorm(y,main = "y")
qqline(y,col = "red")
par(op)
# 绘制散点矩阵
library(car)
scatterplotMatrix(data1,spread = FALSE,lty.smooth=2,main="Scatter Plot Matrix")
# 回归分析
lm1 <- lm(y~.,data = data1)
reg1 <- summary(lm1)
reg1
# BP检验
library(car)
ncvTest(lm1)
# DW检验
library(lmtest)
dwtest(lm1)
# 残差分析
par(mfrow=c(2,2))
plot(lm1)
# 对因变量进行对数变换
trans1 <- lm(log(y) ~ .,data = data1)
lm2 <- trans1
summary(lm2)
par(mfrow=c(2,2))
plot(lm2)
# BP检验
ncvTest(lm2)
# 逐步回归
step(trans1,direction=c("backward"))
step <- lm(log(y) ~ x2+x3+x4+x5+x6+x7+x9,data = data1)
lm3 <- step
summary(lm3)
# BP检验
ncvTest(lm3)
# 异常值检验
library(car)
outlierTest(lm3)
# 删除异常值
data_out1 <- data1[-c(550),]
lm_out1 <- lm(log(y) ~ x2+x3+x4+x5+x6+x7+x9,data = data_out1)
summary(lm_out1)
# 影响点检验
influence.measures(lm_out1)
# 绘制影响图
op <- par(mfrow=c(2,2), mar=0.4+c(4,4,1,1), oma= c(0,0,2,0))
plot(step, 1:4)
par(op)
# 删除异常值后的回归分析
data_out2 <- data1[-c(128,234,550,630),]
lm_out2 <- lm(log(y) ~ x2+x3+x4+x5+x6+x7+x9,data = data_out2)
lm4 <- lm_out2
summary(lm4)
# BP检验
ncvTest(lm4)
# 相关性分析
cor(data_out2)
# 逐步回归
step(lm4,direction=c("backward"))
lm5 <- lm(log(y)~x2+x3+x4+x5+x6+x7+x9+x2*x6+x3*x5+x4*x9+x1*x2+x7*x9,data = data_out2)
summary(lm5)
# VIF检验
library(car)
vif(lm5)
# 预测误差计算
MMAE <- vector(length=100)
test <- function(n,model) {
for (i in 1:n) {
tr <- sample(nrow(wage),0.7*nrow(wage))
te <- sample(nrow(wage),0.3*nrow(wage))
train. <- wage[tr,]
test. <- wage[te,]
y <- train.$Salary
x1 <- train.$Sex
x2 <- train.$Race
x3 <- train.$Age
x4 <- train.$Edlevel
x5 <- train.$Work
x6 <- train.$Union
x7 <- train.$Time
x8 <- train.$Marr
x9 <- train.$Jobcat
data1 <- data.frame(y = y,x1,x2,x3,x4,x5,x6,x7,x8,x9)
y_te <- test.$Salary
x1_te <- test.$Sex
x2_te <- test.$Race
x3_te <- test.$Age
x4_te <- test.$Edlevel
x5_te <- test.$Work
x6_te <- test.$Union
x7_te <- test.$Time
x8_te <- test.$Marr
x9_te <- test.$Jobcat
data_te <- data.frame(x1_te,x2_te,x3_te,x4_te,x5_te,x6_te,x7_te,x8_te,x9_te)
colnames(data_te) <- c("x1","x2","x3","x4",'x5',"x6","x7","x8","x9")
predict(model,data_te)
test <- predict(model,data_te)
y <- log(y_te)
n <- length(y)
MMAE[i] <- sum(abs(y-exp(test)))/(700-n)
}
mean(MMAE)
}
test(1000,lm5)
# Press 统计量
Press <- function(themodel) {
theResisduals <- themodel$residuals
X <- model.matrix(themodel)
return(sum((theResisduals/(1-hat(X)))^2))
}
Press(reg1)
# Cp 统计量
Cp <- function(themodel) {
p <- length(themodel$coefficients)
n <- nrow(themodel$model)
sp <- summary(themodel)$sigma
s <- summary(reg1)$sigma
bias <- (sp^2 - s^2)*(n-p) / (s^2)
return(p + bias)
}
Cp(reg1)
# 将处理后的数据框的列名更改为最初的列名
colnames(data_out2) <- c("Salary", "Sex", "Race", "Age", "Edlevel",
"Work", "Union", "Time", "Marr", "Jobcat")
# 保存处理过的数据为 CSV 文件
write.csv(data_out2, file = "processed_data.csv", row.names = FALSE)
